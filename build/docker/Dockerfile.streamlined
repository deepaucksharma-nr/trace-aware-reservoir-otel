# Optimized multi-stage Dockerfile for trace-aware-reservoir-otel
# This Dockerfile builds a slim, efficient Docker image for both production and benchmarking

# ─── Stage 1: Build cache ───────────────────────────────────────
FROM golang:1.21-alpine AS base

# Install build dependencies
RUN apk add --no-cache git ca-certificates build-base

# Set working directory
WORKDIR /src

# Copy go.mod files to leverage Docker layer caching
COPY go.mod go.sum ./
COPY core/reservoir/go.mod core/reservoir/go.sum ./core/reservoir/

# Download dependencies
RUN go mod download
RUN cd core/reservoir && go mod download

# ─── Stage 2: Builder ────────────────────────────────────────────
FROM base AS builder

# Args for versioning
ARG VERSION=dev
ARG BUILD_DATE=unknown
ARG GIT_COMMIT=unknown

# Copy all source code
COPY . .

# Build with optimizations and version info
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags="-w -s -X main.Version=${VERSION} -X main.BuildDate=${BUILD_DATE} -X main.GitCommit=${GIT_COMMIT}" \
    -o /bin/otelcol-reservoir ./apps/collector

# ─── Stage 3: Benchmarking tools ─────────────────────────────────
FROM base AS benchmark-builder

# Copy all source code
COPY . .

# Build benchmark and verification tools
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o /bin/bench-runner ./bench/runner
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o /bin/verify ./verify

# ─── Stage 4: Production image ─────────────────────────────────────
FROM alpine:3.19 AS production

# Add required packages
RUN apk add --no-cache ca-certificates tzdata curl

# Create non-root user
RUN addgroup -g 10001 otel && adduser -D -G otel -u 10001 otel

# Create data directory and set permissions
RUN mkdir -p /var/otelpersist/badger && chown -R otel:otel /var/otelpersist

# Copy binary from builder
COPY --from=builder /bin/otelcol-reservoir /bin/otelcol-reservoir

# Default configuration via environment variables
ENV RESERVOIR_SIZE=5000
ENV WINDOW_DURATION=60s
ENV TRACE_AWARE=true
ENV LOG_LEVEL=info

# Set up healthcheck
HEALTHCHECK --interval=5s --timeout=2s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8888/metrics || exit 1

# Expose metrics port
EXPOSE 8888

# Switch to non-root user
USER otel

# Set entrypoint
ENTRYPOINT ["/bin/otelcol-reservoir"]

# ─── Stage 5: Benchmark image ────────────────────────────────────────
FROM alpine:3.19 AS benchmark

# Add required packages
RUN apk add --no-cache ca-certificates tzdata curl

# Create non-root user
RUN addgroup -g 10001 otel && adduser -D -G otel -u 10001 otel

# Create data directory and set permissions
RUN mkdir -p /var/otelpersist/badger && chown -R otel:otel /var/otelpersist

# Copy binaries from builders
COPY --from=builder /bin/otelcol-reservoir /bin/otelcol-reservoir
COPY --from=benchmark-builder /bin/bench-runner /bin/bench-runner
COPY --from=benchmark-builder /bin/verify /bin/verify

# Copy benchmark profiles and KPIs
COPY bench/profiles/ /etc/benchmark/profiles/
COPY bench/kpis/ /etc/benchmark/kpis/

# Default configuration via environment variables
ENV RESERVOIR_SIZE=5000
ENV WINDOW_DURATION=60s
ENV TRACE_AWARE=true
ENV LOG_LEVEL=info
ENV BENCH_DURATION=10m
ENV BENCH_PROFILE=max-throughput-traces

# Expose metrics port
EXPOSE 8888

# Expose benchmarking port
EXPOSE 9090

# Switch to non-root user
USER otel

# Set default command
CMD ["sh", "-c", "echo 'Running benchmark with profile ${BENCH_PROFILE} for ${BENCH_DURATION}' && /bin/bench-runner -profiles ${BENCH_PROFILE} -duration ${BENCH_DURATION} -image local"]